# This script accepts a plain text file generated by any Debian-compatible
# package manager using the command 'dpkg -l', and generates a standard CycloneDX
# software bill of materials (SBOM) from the dump, in JSON format.

from cyclonedx.model.bom import Bom
from cyclonedx.model.component import Component, ComponentType
from cyclonedx.output.json import JsonV1Dot4
from packageurl import PackageURL  
from datetime import datetime


def parse_dpkg_l_file(filename: str) -> list[str]:
    with open(filename, 'r', encoding='utf-8') as f:
        return f.readlines()


def main():
    filename = input("Enter the path to the 'dpkg -l' dump file: ").strip()

    try:
        lines = parse_dpkg_l_file(filename)
    except Exception as e:
        print(f"Error reading file: {e}")
        return

    bom = Bom()
    print("Processing installed packages...")

    for line in lines:
        if not line.startswith('ii '):
            continue

        parts = line.split(maxsplit=4)
        if len(parts) < 5:
            print(f"Skipping malformed line: {line.strip()}")
            continue

        name = parts[1].strip()
        version = parts[2].strip()

        try:
            purl = PackageURL(
                type="deb",
                namespace="debian",
                name=name,
                version=version
            )
            component = Component(
                name=name,
                version=version,
                type=ComponentType.APPLICATION,
                purl=purl  # Correct usage
            )
            bom.components.add(component)
        except Exception as e:
            print(f"Error creating/adding component for {name}: {e}")

    try:
        outputter = JsonV1Dot4(bom)
        output_json = outputter.output_as_string()
        print("\nCycloneDX SBOM JSON Output:")
        print(output_json)

        out_file = filename + ".cyclonedx.json"
        with open(out_file, 'w', encoding='utf-8') as f:
            f.write(output_json)
        print(f"\nSBOM written to: {out_file}")

    except Exception as e:
        print(f"Error generating CycloneDX output: {e}")


if __name__ == "__main__":
    print(f"Starting SBOM generation at {datetime.now().isoformat()}")
    main()
